CREATE DATABASE E_Commerce_Company;

use E_Commerce_Company;
-- 01_Table_Analysis.sql
-- Analyze all tables by describing their contents
DESC CUSTOMERS;
DESC PRODUCTS;
DESC ORDERS;
DESC ORDERDETAILS;

-- 02_Top_Cities.sql
-- Identify the top 3 cities with the highest number of customers
SELECT LOCATION, COUNT(CUSTOMER_ID) AS NUMBER_OF_CUSTOMERS
FROM CUSTOMERS
GROUP BY LOCATION
ORDER BY NUMBER_OF_CUSTOMERS DESC
LIMIT 3;

-- 03_Customer_Distribution.sql
-- Determine the distribution of customers based on the number of orders placed
SELECT NUMBEROFORDERS, COUNT(*) AS CUSTOMERCOUNT
FROM (
    SELECT CUSTOMER_ID, COUNT(ORDER_ID) AS NUMBEROFORDERS
    FROM ORDERS
    GROUP BY CUSTOMER_ID
) AS CUSTOMERORDERS
GROUP BY NUMBEROFORDERS
ORDER BY NUMBEROFORDERS ASC;

-- 04_Premium_Products.sql
-- Identify products with an average purchase quantity of 2 and high total revenue
SELECT PRODUCT_ID, AVG(QUANTITY) AS AVGQUANTITY, SUM(QUANTITY * PRICE_PER_UNIT) AS TOTALREVENUE
FROM ORDERDETAILS
GROUP BY PRODUCT_ID
HAVING AVGQUANTITY = 2
ORDER BY TOTALREVENUE DESC;

-- 05_Category_Customers.sql
-- Calculate the unique number of customers purchasing from each product category
SELECT P.CATEGORY, COUNT(DISTINCT O.CUSTOMER_ID) AS UNIQUE_CUSTOMERS
FROM PRODUCTS P
JOIN ORDERDETAILS OD ON P.PRODUCT_ID = OD.PRODUCT_ID
JOIN ORDERS O ON OD.ORDER_ID = O.ORDER_ID
GROUP BY P.CATEGORY
ORDER BY UNIQUE_CUSTOMERS DESC;

-- 06_MoM_Sales_Change.sql
-- Analyze month-on-month percentage change in total sales
SELECT MONTH, TOTALSALES, 
ROUND(((TOTALSALES - LAG(TOTALSALES) OVER (ORDER BY MONTH)) / LAG(TOTALSALES) OVER (ORDER BY MONTH)) * 100, 2) AS PERCENTCHANGE
FROM (
    SELECT DATE_FORMAT(ORDER_DATE, '%Y-%m') AS MONTH, SUM(TOTAL_AMOUNT) AS TOTALSALES
    FROM ORDERS
    GROUP BY MONTH
) AS A;

-- 07_MoM_Order_Value.sql
-- Examine month-on-month changes in average order value
WITH MONTHLYORDVAL AS (
    SELECT DATE_FORMAT(ORDER_DATE, '%Y-%m') AS MONTH, AVG(TOTAL_AMOUNT) AS AVGORDERVALUE
    FROM ORDERS
    GROUP BY MONTH
)
SELECT MONTH, AVGORDERVALUE, 
ROUND((AVGORDERVALUE - LAG(AVGORDERVALUE) OVER (ORDER BY MONTH)),2) AS CHANGEINVALUE
FROM MONTHLYORDVAL
ORDER BY CHANGEINVALUE DESC;

-- 08_Fastest_Turnover.sql
-- Identify products with the highest turnover rate
SELECT PRODUCT_ID, COUNT(ORDER_ID) AS SALESFREQUENCY
FROM ORDERDETAILS
GROUP BY PRODUCT_ID
ORDER BY SALESFREQUENCY DESC
LIMIT 5;

-- 09_Low_Demand_Products.sql
-- List products purchased by less than 40% of the customer base
SELECT P.PRODUCT_ID, P.NAME, COUNT(DISTINCT O.CUSTOMER_ID) AS UNIQUECUSTOMERCOUNT
FROM PRODUCTS P
JOIN ORDERDETAILS OD ON P.PRODUCT_ID = OD.PRODUCT_ID
JOIN ORDERS O ON OD.ORDER_ID = O.ORDER_ID
GROUP BY P.PRODUCT_ID, P.NAME
HAVING UNIQUECUSTOMERCOUNT < (SELECT COUNT(*) FROM CUSTOMERS) * 0.40;

-- 10_Customer_Growth.sql
-- Evaluate month-on-month growth rate in customer base
WITH MONTHLYNEWCUSTOMERS AS (
    SELECT DATE_FORMAT(MIN(ORDER_DATE), '%Y-%m') AS FIRSTPURCHASEMONTH, COUNT(DISTINCT CUSTOMER_ID) AS NEWCUSTOMERS
    FROM ORDERS
    GROUP BY CUSTOMER_ID
)
SELECT FIRSTPURCHASEMONTH, SUM(NEWCUSTOMERS) AS TOTALNEWCUSTOMERS
FROM MONTHLYNEWCUSTOMERS
GROUP BY FIRSTPURCHASEMONTH
ORDER BY FIRSTPURCHASEMONTH;

-- 11_Peak_Sales_Months.sql
-- Identify months with the highest sales volume
SELECT DATE_FORMAT(ORDER_DATE, '%Y-%m') AS MONTH, SUM(TOTAL_AMOUNT) AS TOTALSALES
FROM ORDERS
GROUP BY MONTH
ORDER BY TOTALSALES DESC
LIMIT 3;
